#!/usr/bin/env rho
Rho provides an expressive OS interface that makes it easy to run external
programs.

require 'rho/shell'

Execute commands and grab stdout of the resulting pipeline. No data is read
from the pipe until we force it with a message like each-line.
first-field = $: temp = mktemp rho-shell-example.XXXXXX
                 ls $HOME > $temp
                 sort temp | cut -f 1

Set up a consumer shell process.
consumer = $: gzip > 'result.gz'

Now start piping lines from one end to the other. Notice that we're only moving
data between stdout on one end and stdin on the other. If the second process
fills its stderr buffer, then it will block and nothing more will happen. You
can fix this by redirecting stdout to a consume-everything buffer:
consumer.sink! :stderr

Similarly, we can send an automatic EOF to the first process if it tries to
read anything:
first-field.plug! :stdin

At this point we can safely start moving data between the two processes.
line-count = 0
first-field.stdout.lines.each l :
  consumer.stdin << "#{line-count.inc!}: #{l}"

We could also simply forward one to the other:
pipe = first-field.connect-to consumer
pipe = $: first-field | consumer
