#!/usr/bin/env rho
Rho is similar to Smalltalk in that you define classes procedurally. Unlike
Smalltalk, however, class membership can be changed at runtime. Let's create a
number-array class to work specifically with arrays of numbers:

number-array = array.subclass:
  def.sum:            fold 0.0, :+
  def.average:        sum / size
  def.sum-of-squares: map(:Â²).sum

We can now take a regular array and turn it into a number-array.
xs = [1, 2, 3].become! number-array
say "the sum is #{xs.sum}"

It's inconvenient to promote arrays like this. Fortunately, we can avoid it by
defining a missing-message handler on the array class. We can specify that we
want messages to be forwarded to a different receiver by using
missing-message-receiver.
array.missing-message-receiver name, context :
  become! number-array when number-array.defines? name &&
                            every? x : x.isa? number

Perhaps surprisingly, class-changing is not an expensive operation at all.
Classes are defined by their vtables, which can be changed with just a few
machine instructions and no memory allocation.

Ok, now let's write our own message handler. We've done this with def above,
but we didn't specify any formals. Let's write a more complex method with some
formal parameters.

#stderr = text : say -stderr text

stderr "this goes to stderr"
stderr -text "this goes to stderr"

Using named parameters is a good idea because a class will throw an error if
you specify a name that isn't handled. For example:

do:
  stderr -unsupported "this won't get printed"
  rescue e : say "caught exception: #{e}"

You can specify parameters with default values if you want to take multiple
options. For example:

class.undef.stderr
#stderr = text = nil, color-code = 0 :
  say pieces.join
  where pieces = ["\033[1;#{color-code}m" when color-code != 0,
                  text // 'nothing to say',
                  "\033[0;0m" when color-code != 0]

Now we can invoke stderr using any combination of arguments.

stderr -text 'hi there!' -color-code 31         # 'hi there' in red
stderr -color-code 34                           # 'nothing to say' in blue
stderr -text 'hi!'                              # 'hi!' in default
stderr                                          # 'nothing to say' in default
